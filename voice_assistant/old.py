from tkinter import *
import customtkinter as CTk
import requests
from PIL import Image
import speech_recognition  # распознавание пользовательской речи (Speech-To-Text)
import os
import webbrowser
from translate import Translator


tags_id = {".NET": "1002",
           "Автокредитование": "1032",
           "Автоматизация": "1033",
           "Автоматизация процессов": "1034",
           "Администратор зала": "1037",
           "Активное привлечение": "1038",
           "Активные продажи": "1168",
           "Анализ данных": "1040",
           "Анализ финансово-хозяйственной деятельности": "1041",
           "Аналитик": "1043",
           "Аналитик SQL": "1242",
           "Аналитика": "1045",
           "АФХД": "1048",
           "Банк": "1166",
           "Банковские гарантии": "1337",
           "Белая з/п": "1171",
           "Бизнес-аналитик": "1049",
           "Ведущий менеджер": "1052",
           "Взыскание просроченной задолженности": "1182",
           "Вип-менеджер": "1054",
           "Встречи с клиентами": "1058",
           "Входящая линия": "1059",
           "Входящие звонки": "1060",
           "Главный менеджер": "1061",
           "Дебетовые карты": "1062",
           "Делопроизводство": "1063",
           "Дизайн": "1265",
           "Доставка карт": "1066",
           "Залоговое кредитование": "1270",
           "Зарплатные проекты": "1000",
           "Зарплатные проекты": "1067",
           "Зарплатные проекты Руководитель": "1001",
           "Инвестиции": "1069",
           "Инвестиции": "1273",
           "Инвестиционный аналитик": "1275",
           "Инвестиционный продукт": "1276",
           "Ипотека": "1280",
           "Исследования": "1283",
           "ИТ проекты": "1284",
           "Касса": "1070",
           "Кассир": "1071",
           "Кассовые операции": "1286",
           "Кибербезопасность": "1287",
           "Клиентский опыт": "1072",
           "Клиентский путь": "1073",
           "Клиенты": "1343",
           "Ключевые клиенты": "1074",
           "Коммуникационный дизайн": "1289",
           "Комплаенс-риск": "1291",
           "Консультация клиентов": "1076",
           "Корпоративные клиенты": "1077",
           "Кредит": "1079",
           "Кредит наличными": "1080",
           "Кредитные карты": "1082",
           "Кредитные продукты": "1344",
           "Кредитные риски": "1297",
           "Кредитный анализ": "1298",
           "Кредитный аналитик": "1083",
           "Кредитование": "1084",
           "Кредитование бизнеса": "1085",
           "Кредиты": "1086",
           "Менеджер": "1087",
           "Менеджер отделения банка": "1088",
           "Методология": "1307",
           "ММБ": "1089",
           "МСБ": "1091",
           "МСФО": "1092",
           "Начальник отдела": "1096",
           "Онлайн продажи": "1321",
           "Операционист": "1097",
           "Операционные риски": "1323",
           "Отделение банка": "1100",
           "Отчетность": "1102",
           "Официальное оформление": "1170",
           "Партнеры": "1328",
           "Персональный менеджер": "1103",
           "ПОД\ФТ": "1189",
           "Поддержка клиентов": "1179",
           "Поддержка клиентов в чате": "1177",
           "Портфельный анализ": "1106",
           "Портфельный риск-менеджер": "1107",
           "Построение эффективной команды": "1174",
           "Представитель банка": "1183",
           "Представитель банка": "1108",
           "Премиум клиенты": "1109",
           "Премиум-менеджер": "1110",
           "Премиум-менеджер": "1167",
           "Привлечение клиентов": "1111",
           "Привлечение партнеров": "1112",
           "Продажа": "1114",
           "Продажи": "1345",
           "Продажи ИСЖ/НСЖ": "1116",
           "Продажи НСЖ": "1117",
           "Продажи по телефону": "1181",
           "Работа в банке": "1169",
           "Развитие": "1336",
           "Развитие бизнеса": "1122",
           "Развитие и обучение": "1342",
           "Разъездной характер работы": "1128",
           "Риск-аналитика": "1136",
           "Риск-менеджер": "1354",
           "РКО": "1137",
           "Розничные кредитные риски": "1140",
           "Розничный бизнес": "1141",
           "РСБУ": "1355",
           "Руководитель": "1142",
           "Рыночные риски": "1358",
           "Сейфовые ячейки": "1143",
           "Сервисное обслуживание": "1144",
           "СКБ": "1387",
           "Сопровождение компаний": "1145",
           "Страховой продукт": "1362",
           "Страховые продукты": "1149",
           "Тренер": "1296",
           "Управление командой": "1153",
           "Услуги для бизнеса": "1155",
           "Физические лица": "1157",
           "Финансовые модели": "1160",
           "Финансовый анализ": "1162",
           "Финансовый аналитик": "1369",
           "Финансовый рынок": "1371",
           "Холодные звонки": "1163",
           "Эквайринг": "1164",
           "Электронная коммерция": "1378",
           "Юридические лица": "1165",
           "AD-HOC Аналитика": "1003",
           "Ad-hoc запросы": "1004",
           "Agile": "1005",
           "B2B": "1006",
           "C#": "1007",
           "Call-центр": "1008",
           "Customer Experience": "1011",
           "Customer journey": "1012",
           "CX": "1013",
           "Data science": "1195",
           "DevMLOps": "1199",
           "Docker": "1203",
           "Excel": "1015",
           "Kubernetes": "1211",
           "ML": "1216",
           "Mlops": "1217",
           "MS Power Point": "1018",
           "Product Owner": "1023",
           "Python": "1024",
           "SQL": "1027",
           "VIP клиенты": "1028",
           "VIP Менеджер": "1029"
           }

id = {"Абакан": "0103",
      "Адлер": "ADL1",
      "Азов": "1034",
      "Алапаевск": "1006",
      "Алексин": "01E7",
      "Альметьевск": "0104",
      "Амурск": "0801",
      "Анапа": "0519",
      "Ангарск": "0105",
      "Апатиты": "0619",
      "Арамиль": "ARA1",
      "Арзамас": "0302",
      "Армавир": "0501",
      "Арсеньев": "0810",
      "Артемовский": "ARM1",
      "Артем": "AR01",
      "Архангельск": "0106",
      "Астрахань": "0107",
      "Аткарск": "1021",
      "Ачинск": "0403",
      "Балаково": "0303",
      "Балашиха": "01B4",
      "Балашов": "0341",
      "Балтийск": "1051",
      "Барвиха": "01C6",
      "Барнаул": "0108",
      "Батайск": "0521",
      "Белая Калитва": "1030",
      "Белгород": "0109",
      "Белогорск": "0802",
      "Белорецк": "0201",
      "Белореченск": "location_12",
      "Бердск": "0203",
      "Березники": "0110",
      "Березовский": "BER1",
      "Бийск": "0405",
      "Биробиджан": "0803",
      "Благовещенск": "0804",
      "Богданович": "BGD1",
      "Богородицк": "1035",
      "Борисоглебск": "1064",
      "Братск": "0406",
      "Брест": "location_10",
      "Брянск": "0111",
      "Бугульма": "0304",
      "Будденовск": "1054",
      "Бузулук": "0112",
      "Буйнакск": "1063",
      "Великие Луки": "0602",
      "Великий Новгород": "0603",
      "Великий Устюг": "0199",
      "Вельск": "0607",
      "Верхняя Пышма": "0216",
      "Весь мир": "location_1",
      "Видное": "01C9",
      "Владивосток": "0113",
      "Владикавказ": "0703",
      "Владимир": "0114",
      "Волгоград": "0115",
      "Волгодонск": "0504",
      "Волжский": "0116",
      "Вологда": "0117",
      "Вольск": "1018",
      "Воркута": "0118",
      "Воронеж": "0119",
      "Воскресенск": "01E8",
      "Воткинск": "0305",
      "Всеволжск": "0617",
      "Выборг": "0236",
      "Вязьма": "01E9",
      "Гатчина": "0613",
      "Геленджик": "location_13",
      "Георгиевск": "1053",
      "Глазов": "0120",
      "Гомель": "location_9",
      "Горно-Алтайск": "0407",
      "Горячий Ключ": "GOR1",
      "Грозный": "0702",
      "Гуково": "01A1",
      "Дербент": "0207",
      "Дзержинск": "0200",
      "Дзержинский": "1049",
      "Димитровград": "0306",
      "Дмитров": "1048",
      "Долгопрудный": "01B9",
      "Домодедово": "01B6",
      "Дубна": "1058",
      "Ейск": "0506",
      "Екатеринбург": "0121",
      "Елабуга": "0307",
      "Елец": "01A4",
      "Ессентуки": "0706",
      "Железногорск": "0122",
      "Железнодорожный": "01D5",
      "Жуковский": "01C2",
      "Зеленоград": "01C7",
      "Зеленодольск": "1022",
      "Зерноград": "0518",
      "Златоуст": "0202",
      "Иваново": "0123",
      "Ивантеевка": "1013",
      "Ижевск": "0124",
      "Иннополис": "01A5",
      "Иркутск": "0125",
      "Истра": "01F2",
      "Йошкар-Ола": "0309",
      "Казань": "0126",
      "Калининград": "0127",
      "Калуга": "0128",
      "Каменск-Уральский": "0129",
      "Каменск-Шахтинский": "KS01",
      "Камышлов": "1007",
      "Канск": "0241",
      "Качканар": "0250",
      "Кашира": "1017",
      "Кемерово": "0130",
      "Киев": "0131",
      "Кингисепп": "1036",
      "Киров": "0132",
      "Кисловодск": "0705",
      "Клин": "01E4",
      "Ковров": "0331",
      "Коломна": "01D4",
      "Колпашево": "0411",
      "Колпино": "0620",
      "Комсомольск-на-Амуре": "0133",
      "Кондрово": "1025",
      "Кореновск": "0525",
      "Королев": "01A8",
      "Корсаков": "1038",
      "Коряжма": "0605",
      "Костомукша": "0616",
      "Кострома": "0134",
      "Котлас": "0606",
      "Красногорск": "01B3",
      "Краснодар": "0135",
      "Краснознаменск": "01F3",
      "Краснокамск": "0342",
      "Красноуфимск": "KUF1",
      "Красноярск": "0136",
      "Кронштадт": "0615",
      "Кропоткин": "location_14",
      "Кстово": "0337",
      "Кузнецк": "0338",
      "Кумертау": "1001",
      "Кунгур": "KUN1",
      "Курган": "0137",
      "Курск": "0138",
      "Куса": "0205",
      "Кушва": "1012",
      "Кызыл": "0139",
      "Лениногорск": "0312",
      "Ленинск-Кузнецк": "01D7",
      "Лесной": "LES1",
      "Лесосибирск": "0421",
      "Ливны": "location_15",
      "Липецк": "0140",
      "Лобня": "1046",
      "Лукоянов": "1023",
      "Лысьва": "LSV1",
      "Люберцы": "01A6",
      "Любой город": "location_2",
      "МСК": "location_3",
      "Магадан": "1033",
      "Магнитогорск": "0141",
      "Майкоп": "0508",
      "Махачкала": "0237",
      "Мегион": "0142",
      "Мелеуз": "1002",
      "Миасс": "0143",
      "Миллерово": "1031",
      "Минеральные воды": "1052",
      "Минусинск": "0422",
      "Михайловка": "0527",
      "Михайловск": "1050",
      "Можайск": "1055",
      "Моршанск": "01F7",
      "Москва": "0100",
      "Московская область": "M777",
      "Мурманск": "0144",
      "Муром": "01A2",
      "Мценск": "01F4",
      "Мытищи": "01A7",
      "Набережные Челны": "0145",
      "Назрань": "NZRN",
      "Нальчик": "0704",
      "Наро-Фоминск": "1019",
      "Находка": "0146",
      "Невинномысск": "0707",
      "Нерюнгри": "0147",
      "Нефтекамск": "1003",
      "Нефтеюганск": "0208",
      "Нижневартовск": "0148",
      "Нижнекамск": "0314",
      "Нижний Новгород": "0149",
      "Нижний Тагил": "0150",
      "Николаевск": "1027",
      "Новая Адыгея": "0509",
      "Новгород": "location_16",
      "Новокузнецк": "0151",
      "Новокуйбышевск": "NVKB",
      "Новомосковск": "01A3",
      "Новороссийск": "0152",
      "Новосибирск": "0153",
      "Новотроицк": "0154",
      "Новоуральск": "0239",
      "Новочебоксарск": "0332",
      "Новочеркасск": "0204",
      "Новошахтинск": "NS01",
      "Новый Уренгой": "0155",
      "Ногинск": "01C5",
      "Норильск": "0414",
      "Ноябрьск": "0212",
      "Нур-Султан": "location_8",
      "Нягань": "0213",
      "Обнинск": "location_4",
      "Одинцово": "01B2",
      "Озерск": "0214",
      "Октябрьский": "1004",
      "Омск": "0156",
      "Орел": "0157",
      "Оренбург": "0158",
      "Орехово-Зуево": "01D8",
      "Орск": "0159",
      "Отрадный": "1028",
      "Павлов": "0339",
      "Павловский посад": "1015",
      "Парабель": "0244",
      "Пенза": "0160",
      "Первоуральск": "0161",
      "Переславль-Залесский": "01F5",
      "Пермь": "0162",
      "Петрозаводск": "0608",
      "Петропавловск-Камчатский": "0808",
      "Печора": "0330",
      "Подольск": "01B1",
      "Полевской": "1011",
      "Поронайск": "0206",
      "Прокопьевск": "0215",
      "Протвино": "1056",
      "Прохладный": "1065",
      "Псков": "0609",
      "Пушкино": "01C1",
      "Пятигорск": "0701",
      "Радужный": "0163",
      "Раменское": "01B7",
      "Регион": "0164",
      "Реж": "1008",
      "Реутов": "01B5",
      "Россия": "location_17",
      "Россошь": "01F6",
      "Ростов": "01F8",
      "Ростов-на-Дону": "0165",
      "Рубцовск": "1042",
      "Рузаевка": "0348",
      "Рыбинск": "0166",
      "Рязань": "0167",
      "СПБ": "location_11",
      "СПБ/МСК": "location_6",
      "Салават": "1005",
      "Салехард": "0249",
      "Самара": "0168",
      "Санкт-Петербург": "0169",
      "Саранск": "0228",
      "Сарапул": "0316",
      "Саратов": "0170",
      "Свободный": "0209",
      "Севастополь": "location_7",
      "Северодвинск": "0610",
      "Северск": "0612",
      "Сергиев Посад": "01C3",
      "Серов": "0171",
      "Серпухов": "01C8",
      "Сибай": "0343",
      "Славянск-на-Кубани": "0517",
      "Смоленск": "0172",
      "Снежинск": "0218",
      "Советск": "0611",
      "Советский": "1026",
      "Соликамск": "0344",
      "Солнечногорск": "SG01",
      "Сорочинск": "0173",
      "Сосновый Бор": "0230",
      "Сосногорск": "1024",
      "Сочи": "0174",
      "Ставрополь": "0175",
      "Старый Оскол": "0231",
      "Стерлитамак": "0176",
      "Стрежевой": "0419",
      "Ступино": "1016",
      "Сургут": "0177",
      "Сызрань": "0328",
      "Сыктывкар": "0178",
      "Сысерть": "1010",
      "Таганрог": "0210",
      "Талица": "1009",
      "Тамбов": "0179",
      "Тверь": "0180",
      "Тимашевск": "0514",
      "Тихорецк": "0515",
      "Тобольск": "0220",
      "Томилино": "1040",
      "Томск": "0182",
      "Трехгорный": "0235",
      "Троицк": "TR01",
      "Туапсе": "0183",
      "Тула": "0184",
      "Тында": "1037",
      "Тюмень": "0185",
      "Удаленно": "location_5",
      "Улан-Удэ": "0417",
      "Ульяновск": "0186",
      "Усинск": "0211",
      "Усолье-Сибирское": "0187",
      "Уссурийск": "0614",
      "Усть-Илимск": "0246",
      "Усть-Катав": "0222",
      "Усть-Лабинск": "0526",
      "Уфа": "0188",
      "Ухта": "0189",
      "Фрязино": "1014",
      "Хабаровск": "0190",
      "Ханты-Мансийск": "0223",
      "Химки": "01A9",
      "Чайковский": "0319",
      "Чебоксары": "0191",
      "Челябинск": "0192",
      "Череповец": "0193",
      "Черкесск": "1062",
      "Чехов": "01D6",
      "Чита": "0418",
      "Шатура": "1061",
      "Шахты": "0520",
      "Шелехов": "0248",
      "Щекино": "1066",
      "Щелково": "01B8",
      "Щербинка": "1057",
      "Электросталь": "01C4",
      "Элиста": "0516",
      "Энгельс": "0233",
      "Югорск": "1029",
      "Южно-Сахалинск": "0194",
      "Южноуральск": "0234",
      "Юрга": "0195",
      "Якутск": "0196",
      "Ярославль": "0197",
      "Ясный": "0198",
      "London": "0101",
      "New-York": "0102"}


def record_and_recognize_audio(*args: tuple):
    recognizer = speech_recognition.Recognizer()
    microphone = speech_recognition.Microphone()

    with microphone:
        recognized_data = ""

        # регулирование уровня окружающего шума
        recognizer.adjust_for_ambient_noise(microphone, duration=2)

        try:
            print("Listening...")
            audio = recognizer.listen(microphone, 5, 5)

            with open("microphone-results.wav", "wb") as file:
                file.write(audio.get_wav_data())

        except speech_recognition.WaitTimeoutError:
            print("Can you check if your microphone is on, please?")
            return

        # использование online-распознавания через Google
        try:
            print("Started recognition...")
            recognized_data = recognizer.recognize_google(audio, language="ru").lower()

        except speech_recognition.UnknownValueError:
            pass

        return recognized_data


def callback(url):
    webbrowser.open_new(url)


def location():
    translator= Translator(to_lang="ru")
    response = requests.get(f"http://ip-api.com/json")
    result = response.json()
    city = translator.translate(result['city'])
    return city

def city_translate(text):
    translator = Translator(to_lang="en", from_lang='ru')
    city = translator.translate(text)
    return city


it_tags = [".NET", "Автоматизация процессов", "Кибербезопасность", "Операционист", "C#", "Data science",
           "DevMLOps", "Docker", "Kubernetes", "ML", "Mlops", "Python", "SQL"]
analytics_tags = ["Анализ финансово-хозяйственной деятельности", "Аналитик", "Аналитик SQL", "Аналитика",
                  "Бизнес-аналитик", "Кредитный аналитик", "Финансовые риски", "Финансовый анализ",
                  "Финансовый аналитик"]
bank_tags = ['Автокредитование', "Активные продажи", "Банк", "Залоговое кредитование", "Ипотека",
             "Инвестиции", "Инвестиционный аналитик", "Работа в банке", "Услуги для бизнеса",
             "СКБ", "Портфельный анализ", "Залоговое кредитование", "Банковские гарантии"]
client_tags = ["Взыскание просроченной задолженности", "Консультация клиентов", "Ключевые клиенты",
               "Поддержка клиентов", "Продажи по телефону", "Привлечение клиентов", "Привлечение партнеров",
               "Call-центр", "Холодные звонки", "Премиум клиенты"]

answers = ['Нет', '1', '2', '3', '4']

dialog_tree = {0: [f"Здравствуйте, я помогу вам в выборе вакансии. Как я могу к Вам обращаться?", True, False, [], ''],
               1: [f"Вы из города {location()}?", True, True, ['Да', 'Нет'], f"Пожалуйста, введите Ваш город.", True],
               2: [f"Выберите Вашу сферу деятельности из списка:\n 1.IT\n 2.Аналитика\n3.Кредиты/Инвестиции\n4.Работа с клиентами",
                   True, True, [1, 2, 3, 4], '', True],
               3: [f"Выберите подкатегорию", True, True, [it_tags, analytics_tags, bank_tags, client_tags], '', False],
               4: [f"Хотите ли Вы подобрать вакансию?", True, True, ['Да', 'Нет'], '', True]
               }


class App(CTk.CTk):
    def __init__(self):
        super().__init__()
        CTk.set_appearance_mode('light')
        self.data = []
        self.city = location()
        self.counter = 0
        self.answer = None
        self.last_question = False
        self.win_width = CTk.CTk.winfo_screenwidth(self)
        self.win_height = CTk.CTk.winfo_screenheight(self)
        self.geometry(f"+{self.win_width - 300}+{self.win_height - 583}")
        self.maxsize(290, 510), self.minsize(290, 510)
        self.resizable(False, False)
        self.title('abc')
        self.input_image = CTk.CTkImage(light_image=Image.open('image/btn3.png'),
                                        size=(29, 29))
        self.voice_image = CTk.CTkImage(light_image=Image.open('image/btn4.png'),
                                        size=(25, 25))

        self.text = CTk.CTkScrollableFrame(master=self, height=380, fg_color='#ebebeb')
        self.text.pack(side=TOP, fill=BOTH)

        self.voice_btn = CTk.CTkButton(master=self, image=self.voice_image, command=self.voice_record,
                                       fg_color='transparent',
                                       width=3, height=3, hover=False)
        self.voice_btn.place(x=5, y=480)

        self.entry = CTk.CTkEntry(master=self, width=210)
        self.entry.pack(side=BOTTOM)
        self.send_btn = CTk.CTkButton(master=self, image=self.input_image, command=self.msg_send,
                                      fg_color='transparent',
                                      width=3, height=3, hover=False)
        self.send_btn.place(x=250, y=477)
        # self.bind("<>", self.msg_send)
        self.dialog()

    def dialog(self, answer=False, msg=None, ):

        if answer and dialog_tree[self.counter - 1][4] and msg in answers:
            if msg == 'Нет':
                self.add_label(1, dialog_tree[self.counter - 1][4])


        else:
            self.add_label(1, dialog_tree[self.counter][0])

            if dialog_tree[self.counter][1]:
                if dialog_tree[self.counter][2]:
                    if dialog_tree[self.counter][5]:
                        self.add_button(dialog_tree[self.counter][3], 1)
                    else:
                        self.add_button(dialog_tree[self.counter][3][int(self.data[-1]) - 1], 2)
            if not dialog_tree[self.counter][1]:
                self.dialog()

            self.counter += 1

    def return_link(self):
        tag = self.data[3] if str(self.data[2]).isdigit() else self.data[4]
        link = f'https://job.alfabank.ru/api/vacancies?city={id[self.city.strip()]}&radius=0000&recognizedParts={city_translate(self.city).lower()}&tag={tags_id[tag]}&take=20'
        response = requests.get(link)
        result = response.json()
        job_link = f"https://job.alfabank.ru/vacancies{result['items'][0]['slug']}"
        link1 = CTk.CTkLabel(master=self.text, text=result['items'][0]['slug'], wraplength=150, fg_color='#FFE4B5', corner_radius=10)
        link1.pack(ipadx=10, anchor=NW)
        link1.bind("<Button-1>", lambda e: callback(job_link))

    def add_button(self, values, type):
        if type == 1:
            self.answ_btn = CTk.CTkSegmentedButton(master=self, values=values,
                                                   command=self.segmented_button_callback)
            self.answ_btn.pack(side=BOTTOM, fill=X, pady=5)
        elif type == 2:
            self.answ_btn = CTk.CTkOptionMenu(master=self, values=values,
                                              command=self.segmented_button_callback)
            self.answ_btn.pack(side=BOTTOM, fill=X, pady=5)

    def voice_record(self):
        self.record = record_and_recognize_audio()
        self.add_label(2, self.record)
        os.remove("microphone-results.wav")

    def segmented_button_callback(self, value):
        self.answ_btn.destroy()
        self.add_label(2, value)

    def msg_send(self, event=None):
        msg = self.entry.get()
        try:
            self.answ_btn.destroy()
        except AttributeError:
            pass
        self.entry.delete(0, len(msg))
        self.add_label(2, msg)

    def add_label(self, face, text):
        CTk.CTkLabel(master=self.text, text=f'{text}', wraplength=150, fg_color='#FFE4B5', corner_radius=10).pack(
            ipadx=10, anchor=NW) \
            if face == 1 else \
            CTk.CTkLabel(master=self.text, wraplength=150, text=f'{text}', fg_color='#87CEEB', corner_radius=10).pack(
                ipadx=10, anchor=NE)

        if face != 1:
            self.data.append(text)
            print(self.data)
            print(self.counter)
            if self.data[-1] == "Нет" and self.counter > 3:
                self.destroy()
            if self.counter == 2 and self.data[1] == "Нет":
                self.city = text
            if self.counter == len(dialog_tree):
                self.return_link()
            else:
                self.dialog(True, text)


if __name__ == '__main__':
    app = App()
    app.mainloop()
